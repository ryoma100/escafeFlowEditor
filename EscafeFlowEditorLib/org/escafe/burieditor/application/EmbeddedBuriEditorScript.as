// ActionScript file
import flash.events.KeyboardEvent;
import flash.ui.Keyboard;

import mx.collections.ArrayCollection;
import mx.controls.Alert;
import mx.events.CloseEvent;
import mx.managers.PopUpManager;

import org.escafe.burieditor.BuriEditorConst;
import org.escafe.burieditor.component.BuriProcessEditor;
import org.escafe.burieditor.dialog.DenpyouDialog;
import org.escafe.burieditor.dialog.PackageDialog;
import org.escafe.burieditor.dialog.ParticipantDialog;
import org.escafe.burieditor.dialog.ProcessDialog;
import org.escafe.burieditor.dialog.XpdlOpenDialog;
import org.escafe.burieditor.dialog.XpdlSaveDialog;
import org.escafe.burieditor.object.Participant;
import org.escafe.burieditor.xpdl.XpdlReader;
import org.escafe.burieditor.xpdl.XpdlWriter;
import org.escafe.graph.element.Element;
private var _xpdlId: String;private var _packageName: String;private var _processes: ArrayCollection = new ArrayCollection();private var _nextProcessXpdlId: int;/** * @category initialize */private function onCreationComplete(): void {	toolbar.changeFunction = onToolBarChange;	point.setFocus();		processList.dataProvider = _processes;	initializePackage();}/** * @category initialize */private function initializePackage(): void {	processStack.removeAllChildren();	_processes.removeAll();	xpdlId = "newpkg";	packageName = "パッケージ";	_nextProcessXpdlId = 0;	addProcess();	processStack.selectedIndex = 0;	participantList.dataProvider = getCurrentProcess().participants;	onProcessListChange();	participantList.selectedIndex = 0;	onParticipantListClick();}public function createGraph(xpdlString: Object): void {	processStack.removeAllChildren();	_processes.removeAll();	_nextProcessXpdlId = 0;	var xpdlReader: XpdlReader = new XpdlReader(this);	xpdlReader.readXpdlString(xpdlString as String);	processStack.selectedIndex = 0;	participantList.dataProvider = getCurrentProcess().participants;	onProcessListChange();	participantList.selectedIndex = 0;	onParticipantListClick();}/** * @category initialize */private function onToolBarChange(): void {	getCurrentProcess().getBuriGraphEditor().toolbarId = toolbar.buttonId;}/** * @category accessing */public function get xpdlId(): String {	return _xpdlId;}/** * @category accessing */public function set xpdlId(newId: String): void {	_xpdlId = newId;}/** * @category accessing */public function get packageName(): String {	return _packageName;}/** * @category accessing */public function set packageName(newName: String): void {	_packageName = newName;}/** * @category xpdl id creation */public function getNextWorkflowProcessXpdlId(): String {	var nextId: String;	do {		_nextProcessXpdlId++;		nextId = _xpdlId + "_wp" + _nextProcessXpdlId;	} while (containsWorkflowProcessXpdlId(nextId));	return nextId;}/** * @category xpdl id creation */private function containsWorkflowProcessXpdlId(xpdlId: String): Boolean {	for each (var workflowProcess: BuriProcessEditor in processStack.getChildren()) {		if (workflowProcess.xpdlId == xpdlId) {			return true;		}	}	return false;}/** * @category process accessing */public function addProcess(): BuriProcessEditor {    var xpdlId:String = getNextWorkflowProcessXpdlId();	var process: BuriProcessEditor = new BuriProcessEditor(xpdlId);	process.processName = "プロセス" + _nextProcessXpdlId;	process.rootPackage = this;	processStack.addChild(process);	_processes.addItem(process);	return process;}/** * @category process accessing */public function removeProcess(): void {	if (_processes.length <= 1) {		Alert.show("ワークフロープロセスを全て削除することは出来ません。");		return;	}		var process: BuriProcessEditor = processList.selectedItem as BuriProcessEditor;	processStack.removeChild(process);	_processes.removeItemAt(processList.selectedIndex);}/** * @category process accessing */public function getCurrentProcess(): BuriProcessEditor {	return processStack.selectedChild as BuriProcessEditor;}/** * @category process changing */private function onProcessListChange(): void {	if (_processes.length == 0) {		return;	}	if (processList.selectedIndex < 0) {		// 非選択はできないように		processList.selectedIndex = 0;		processStack.selectedIndex = 0;	} else {		// BuriProcessEditorの切り替え		processStack.selectedIndex = processList.selectedIndex;	}		participantList.dataProvider = getCurrentProcess().participants;	processName.text = getCurrentProcess().processName;	scaleSlider.value = getCurrentProcess().getBuriGraphEditor().scaleX * 100;}/** * @category process property */public function openProcessProperty(): void {	var processDialog: ProcessDialog = PopUpManager.createPopUp(parent, ProcessDialog, true) as ProcessDialog;	processDialog.process = getCurrentProcess();	PopUpManager.centerPopUp(processDialog);}/** * @category process denpyou */public function openProcessDenpyou(): void {	var denpyouDialog: DenpyouDialog = PopUpManager.createPopUp(parent, DenpyouDialog, true) as DenpyouDialog;	PopUpManager.centerPopUp(denpyouDialog);}/** * @category participant changing */private function onParticipantListChange(): void {	if (participantList.selectedIndex < 0) {		// 非選択はできないように		participantList.selectedIndex = 0;	}	var process: BuriProcessEditor = getCurrentProcess();	if (process != null) {		process.getBuriGraphEditor().currentParticipant = participantList.selectedItem as Participant;	} }/** * @category participant changing */private function onParticipantListClick(): void {	getCurrentProcess().getBuriGraphEditor().setSelectParticipant(participantList.selectedItem as Participant);}public function isUsedParticipant(aParticipant: Participant): Boolean {	for each (var aProcess: BuriProcessEditor in processStack.getChildren()) {		if (aProcess.isUsedParticipant(aParticipant)) {			return true;		}	}	return false;}public function openPackageProperty(): void {	var packageDialog: PackageDialog = PopUpManager.createPopUp(this, PackageDialog, true) as PackageDialog;	packageDialog.rootPackage = this;	PopUpManager.centerPopUp(packageDialog);}public function openParticipantProperty(): void {	var participantDialog: ParticipantDialog = PopUpManager.createPopUp(this, ParticipantDialog, true) as ParticipantDialog;	participantDialog.participant = participantList.selectedItem as Participant;	PopUpManager.centerPopUp(participantDialog);}public function openElementProperty(): void {	var elements: Array = getCurrentProcess().getBuriGraphEditor().getSelectedElements();	getCurrentProcess().getBuriGraphEditor().openPropertyDialog(elements[0] as Element);}
private function keyUp(event: KeyboardEvent): void {	switch (event.keyCode) {
		case Keyboard.DELETE:
			getCurrentProcess().getBuriGraphEditor().removeSelectedElement();			break;
		case Keyboard.ESCAPE:
			toolbar.buttonId = BuriEditorConst.ID_POINT;
			break;		case 65:	// 'a' key			if (event.ctrlKey) {				getCurrentProcess().getBuriGraphEditor().selectAllElements();
			}			break;
	}
}public function saveXpdlFile(): void {	var xpdlWriter: XpdlWriter = new XpdlWriter(this);	var xmlString: String = xpdlWriter.writeXpdlString();	var xpdlDialog: XpdlSaveDialog = PopUpManager.createPopUp(this, XpdlSaveDialog, true) as XpdlSaveDialog;	xpdlDialog.xpdlString = xmlString;	PopUpManager.centerPopUp(xpdlDialog);}public function openXpdlFile(): void {	var xpdlDialog: XpdlOpenDialog = PopUpManager.createPopUp(this, XpdlOpenDialog, true) as XpdlOpenDialog;	xpdlDialog.okFunction = createGraph;	PopUpManager.centerPopUp(xpdlDialog);}public function clearAll(): void {	Alert.show("すべて削除します。よろしいですか？", null, Alert.YES | Alert.NO, this, clearAllListener, null, Alert.NO);}private function clearAllListener(event: CloseEvent): void {	if (event.detail == Alert.YES) {		initializePackage();	}}private function scaleChange(): void {	getCurrentProcess().getBuriGraphEditor().scaleX = scaleSlider.value / 100;	getCurrentProcess().getBuriGraphEditor().scaleY = scaleSlider.value / 100;}/** * @category xpdl writer */public function writeXpdl(packageXml: XML): void {	writePackageHeader(packageXml);	writeWorkflowProcesses(packageXml);	writeExtendedAttributes(packageXml);}/** * @category xpdl writer */private function writePackageHeader(packageXml: XML): void {	packageXml.appendChild(<PackageHeader/>);	packageXml.PackageHeader.appendChild(<XPDLVersion/>);	packageXml.PackageHeader.XPDLVersion.appendChild("1.0");    packageXml.PackageHeader.appendChild(<Vendor/>);    packageXml.PackageHeader.Vendor.appendChild("escafe.org");	packageXml.PackageHeader.appendChild(<Created/>);	packageXml.PackageHeader.Created.appendChild(new Date().toString());}/** * @category xpdl writer */private function writeWorkflowProcesses(packageXml: XML): void {	packageXml.appendChild(<WorkflowProcesses/>);	for each (var workflowProcess: BuriProcessEditor in processStack.getChildren()) {		workflowProcess.writeWorkflowProcess(packageXml.WorkflowProcesses);	}}/** * @category xpdl writer */private function writeExtendedAttributes(packageXml: XML): void {	packageXml.appendChild(<ExtendedAttributes/>);	packageXml.ExtendedAttributes.appendChild(<ExtendedAttribute Name="EDITING_TOOL" Value="EscafeFlow Editor"/>);	packageXml.ExtendedAttributes.appendChild(<ExtendedAttribute Name="EDITING_TOOL_VERSION" Value={BuriEditorConst.VERSION}/>);}