// ActionScript file
import flash.events.Event;import flash.events.InvokeEvent;import flash.filesystem.File;import flash.filesystem.FileMode;import flash.filesystem.FileStream;import flash.net.FileFilter;import mx.events.MenuEvent;import mx.managers.PopUpManager;import org.escafe.burieditor.xpdl.XpdlWriter;
private var _currentFile: File = new File();
/** * @category startup xpdl loading */private function onCreationComplete(): void {	function onInvoke(event: InvokeEvent): void {		if (event.arguments.length > 0) {			_currentFile.nativePath = event.arguments[0];			loadXpdl(_currentFile);		} else {			_currentFile.url = event.currentDirectory.url;		}	}		_currentFile.addEventListener(Event.SELECT, onSelect);	NativeApplication.nativeApplication.addEventListener(InvokeEvent.INVOKE, onInvoke);}
/** * @category xpdl loading */private function loadXpdl(file: File): void {	var stream: FileStream = new FileStream();	try {		stream.open(file, FileMode.READ);		var xpdlString: String = stream.readMultiByte(stream.bytesAvailable, "UTF-8");	} catch (e: Event) {		trace(e);		return;	} finally {		stream.close();	}	embeddedBuriEditor.createGraph(xpdlString);}/** * @category xpdl loading */private function onSelect(event: Event): void {	var file: File = event.currentTarget as File;	if (file != null) {		_currentFile.url = file.url;		loadXpdl(_currentFile);	}}/** * @category xpdl loading */private function openXpdlFile(): void {	var filter: FileFilter = new FileFilter("XPDLファイル", "*.xpdl");	_currentFile.browseForOpen("XPDLファイルを選択してください", [filter]);}/** * @category xpdl saving */private function saveXpdlFile(): void {	function onSaveSelect(event: Event): void {		var file: File = event.currentTarget as File;		saveXpdl(file);	}	var file: File = new File();	file.url = _currentFile.url;	file.addEventListener(Event.SELECT, onSaveSelect);	file.browseForSave("「ファイル名.xpdl」形式で保存先を指定して下さい。");}/** * @category xpdl saving */private function saveXpdl(file: File): void {	var xpdlWriter: XpdlWriter = new XpdlWriter(embeddedBuriEditor);	var xmlString: String = xpdlWriter.writeXpdlString();	var stream: FileStream = new FileStream();	try {		stream.open(file, FileMode.WRITE);		stream.writeMultiByte(xmlString, "UTF-8");	} catch (e: Event) {		trace(e);		return;	} finally {		stream.close();	}}/** * @category picture saving */private function savePictureFile():void {    function onSaveSelect(event: Event): void {        var file: File = event.currentTarget as File;        savePicture(file);    }    var file: File = new File();    file.url = _currentFile.url;    file.addEventListener(Event.SELECT, onSaveSelect);    file.browseForSave("「ファイル名.png」形式で保存先を指定して下さい");}/** * @category picture saving */private function savePicture(file: File): void {    var pngByteArray:ByteArray = embeddedBuriEditor.getCurrentProcess().getBuriGraphEditor().createPngImage();    var fs:FileStream = new FileStream();     try {        fs.open( file, FileMode.WRITE );        fs.writeBytes(pngByteArray);    } catch (e:Event) {        trace(e);        return;    } finally {        fs.close();    }}private function onMenuItemClick(event: MenuEvent): void {	switch (event.item.@id.toString()) {		case "fileNew":			embeddedBuriEditor.clearAll();			break;		case "fileOpen":			openXpdlFile();			break;		case "fileSave":			saveXpdlFile();			break;		case "pictureSave":		    savePictureFile();		    break;		case "editAllSelect":			embeddedBuriEditor.getCurrentProcess().getBuriGraphEditor().selectAllElements();			break;		case "editDelete":			embeddedBuriEditor.getCurrentProcess().getBuriGraphEditor().removeSelectedElement();		case "editProperty":			embeddedBuriEditor.openElementProperty();			break;		case "packageProperty":			embeddedBuriEditor.openPackageProperty();			break;		case "workflowProcessAdd":			embeddedBuriEditor.addProcess();			break;		case "workflowProcessRemove":			embeddedBuriEditor.removeProcess();			break;		case "workflowProcessProperty":			embeddedBuriEditor.openProcessProperty();			break;		case "participantAdd":			embeddedBuriEditor.getCurrentProcess().addParticipant();			break;		case "participantRemove":			var index: int = embeddedBuriEditor.participantList.selectedIndex;			if (index >= 0) {				embeddedBuriEditor.getCurrentProcess().removeParticipant(index);			}			break;		case "participantProperty":			embeddedBuriEditor.openParticipantProperty();			break;		case "helpAbout":			openAbout();			break;	}}public function openAbout(): void {	var aboutDialog: AboutDialog = PopUpManager.createPopUp(this, AboutDialog, true) as AboutDialog;	PopUpManager.centerPopUp(aboutDialog);}