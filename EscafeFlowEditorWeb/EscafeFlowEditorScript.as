// ActionScript file
import flash.events.Event;import mx.events.BrowserChangeEvent;import mx.events.MenuEvent;import mx.managers.BrowserManager;import mx.managers.IBrowserManager;import mx.managers.PopUpManager;import mx.utils.URLUtil;
private var _browserManager: IBrowserManager;private var _urlLoader: URLLoader;

/** * @category startup xpdl loading */private function onCreationComplete(): void {
	if (ExternalInterface.available) {		ExternalInterface.call("focusFXApp");	}	_browserManager = BrowserManager.getInstance();	_browserManager.addEventListener(BrowserChangeEvent.BROWSER_URL_CHANGE, onBrowserUrlChange);	_browserManager.init("", "escafeFlowEditor");}
private function onBrowserUrlChange(event: BrowserChangeEvent): void {	var fragment: Object = URLUtil.stringToObject(_browserManager.fragment);	var xpdl: String = fragment.xpdl;	if (xpdl) {		_browserManager.setTitle(xpdl + " - escafeFlowEditor");		_urlLoader = new URLLoader(new URLRequest("xpdl/" + xpdl + ".xpdl"));		_urlLoader.addEventListener("complete", onXpdlLoadComplete);	}}
/** * @category startup xpdl loading */private function onXpdlLoadComplete(event: Event): void {
	embeddedBuriEditor.createGraph(_urlLoader.data);
}

private function onMenuItemClick(event: MenuEvent): void {	switch (event.item.@id.toString()) {		case "fileNew":			embeddedBuriEditor.clearAll();			break;		case "fileOpen":			embeddedBuriEditor.openXpdlFile();			break;		case "fileSave":			embeddedBuriEditor.saveXpdlFile();			break;		case "editAllSelect":			embeddedBuriEditor.getCurrentProcess().getBuriGraphEditor().selectAllElements();			break;		case "editDelete":			embeddedBuriEditor.getCurrentProcess().getBuriGraphEditor().removeSelectedElement();		case "editProperty":			embeddedBuriEditor.openElementProperty();			break;		case "packageProperty":			embeddedBuriEditor.openPackageProperty();			break;		case "workflowProcessAdd":			embeddedBuriEditor.addProcess();			break;		case "workflowProcessRemove":			embeddedBuriEditor.removeProcess();			break;		case "workflowProcessProperty":			embeddedBuriEditor.openProcessProperty();			break;		case "participantAdd":			embeddedBuriEditor.getCurrentProcess().addParticipant();			break;		case "participantRemove":			var index: int = embeddedBuriEditor.participantList.selectedIndex;			if (index >= 0) {				embeddedBuriEditor.getCurrentProcess().removeParticipant(index);			}			break;		case "participantProperty":			embeddedBuriEditor.openParticipantProperty();			break;		case "helpAbout":			openAbout();			break;	}}public function openAbout(): void {	var aboutDialog: AboutDialog = PopUpManager.createPopUp(this, AboutDialog, true) as AboutDialog;	PopUpManager.centerPopUp(aboutDialog);}